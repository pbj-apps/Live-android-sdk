plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'maven-publish'
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {

        debug {
            minifyEnabled false
        }

        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
//            getDefaultProguardFile('proguard-android-optimize.txt'),

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    lintOptions {
        abortOnError false
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    ext {
        kotlin_version = '1.4.32'
        lifecycle_version = '2.3.1'
        compose_version = '1.0.0-beta02'
        compose_viewmodel_version = '1.0.0-alpha03'
        nav_compose_version = "1.0.0-alpha09"
        accompanist_version = "0.6.2"
        coroutine_version = '1.4.3'
        retrofit_version = '2.9.0'
        koin_version = '3.0.1'
        moshi_version = '1.11.0'
        okhttp_version = '4.9.0'
        mockk_version = '1.10.2'
        kotest_version = '4.3.1'
        exoPlayer_version = '2.13.3'
        scarlet_version = '0.1.10'
        timber_version = '4.7.1'
    }

    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api 'androidx.core:core-ktx:1.3.2'
    api 'androidx.appcompat:appcompat:1.2.0'
    api 'com.google.android.material:material:1.3.0'
    api 'androidx.fragment:fragment-ktx:1.3.3'
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutine_version"

    //Moshi - Parser
    api "com.squareup.moshi:moshi:$moshi_version"
    api "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    //Retrofit
    api "com.squareup.retrofit2:retrofit:$retrofit_version"
    api "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    api "com.squareup.okhttp3:okhttp:$okhttp_version"
    api "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    //Koin - DI
    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_version"
    testImplementation "io.insert-koin:koin-test:$koin_version"

    //Scarlet
    api 'com.tinder.scarlet:scarlet:0.1.10'
    api "com.tinder.scarlet:websocket-okhttp:0.1.10"
    api "com.tinder.scarlet:stream-adapter-coroutines:0.1.10"
    api "com.tinder.scarlet:message-adapter-moshi:0.1.10"
    api "com.tinder.scarlet:lifecycle-android:0.1.10"

    api "io.coil-kt:coil:1.1.1"

    api 'com.jakewharton.timber:timber:4.7.1'

    //Video Player
    api "com.google.android.exoplayer:exoplayer-hls:$exoPlayer_version"
    api "com.google.android.exoplayer:exoplayer-core:$exoPlayer_version"
    api "com.google.android.exoplayer:exoplayer-ui:$exoPlayer_version"

    //Tests
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version" // for kotest framework
    testImplementation "io.kotest:kotest-assertions-core:$kotest_version" // for kotest core jvm assertions
    testImplementation "io.kotest:kotest-property:$kotest_version" // for kotest
    // testImplementation for pure JVM unit tests
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
    // androidTestImplementation for Android instrumentation tests
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"

    testImplementation "io.mockk:mockk:$mockk_version"
}

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties"))) //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file

def getVersionName = { ->
    return "0.0.27-alpha"
}

def getArtificatId = { ->
    return "live"
}

publishing {
    publications {
        bar(MavenPublication) {
            groupId 'com.pbj.live'
            artifactId getArtificatId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtificatId()}-release.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // Iterate over the api dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pbj-apps/Live-android-sdk")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}

task assemblePublish {
    dependsOn 'assemble'
    dependsOn 'publish'
    tasks.findByName('publish').mustRunAfter 'assemble'
}